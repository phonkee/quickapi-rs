/*
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2024-2025, Peter Vrba
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 *
 */

#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
pub struct CreateUser {
    pub username: String,
}

// TODO: should this be TryFrom instead of From?
impl From<CreateUser> for entity::UserModel {
    fn from(create_user: CreateUser) -> Self {
        entity::UserModel {
            id: 0, // Assuming the ID is auto-generated by the database
            username: create_user.username,
        }
    }
}

#[derive(Debug, Default, Clone, serde::Serialize, serde::Deserialize)]
pub struct SimpleUser {
    pub id: i32,
    pub username: String,
}

impl From<entity::UserModel> for SimpleUser {
    fn from(user: entity::UserModel) -> Self {
        SimpleUser {
            id: user.id,
            username: user.username,
        }
    }
}

impl From<SimpleUser> for entity::UserModel {
    fn from(user: SimpleUser) -> Self {
        entity::UserModel {
            id: user.id,
            username: user.username,
        }
    }
}

#[derive(Debug, Default, Clone, serde::Serialize)]
pub struct UserIdOnly {
    pub id: i32,
}

impl From<entity::UserModel> for UserIdOnly {
    fn from(user: entity::UserModel) -> Self {
        UserIdOnly { id: user.id }
    }
}

#[derive(Debug, Default, Clone, serde::Serialize, serde::Deserialize)]
pub struct UsernameOnly(pub String);

impl From<entity::UserModel> for UsernameOnly {
    fn from(user: entity::UserModel) -> Self {
        UsernameOnly(user.username)
    }
}
